{"pages":[{"title":"about","text":"关于我 一枚无名小辈，相信知识就是力量。 会一直在路上…… QQ：1870949565Email: 1870949565@qq.com","link":"/about/index.html"},{"title":"tages","text":"","link":"/tages/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"解决不能加载webpack-cli问题","text":"明明安装了webpack-cli包，却报Unable to load '@webpack-cli/serve' command错误 报错原因输入下面代码，查看webpack-cli的版本 12npx webpack --version复制代码 结果： 1234webpack 5.42.1webpack-cli 4.7.2webpack-dev-server 3.11.2复制代码 可能是 webpack-cli 版本不够，导致出现的错误。 解决方案不用卸载旧版本的 webpack-cli ，使用下面命令安装最新版本的 webpack-cli 1npm install -D webpack-cli","link":"/2022/07/27/%E8%A7%A3%E5%86%B3%E4%B8%8D%E8%83%BD%E5%8A%A0%E8%BD%BDwebpack-cli%E9%97%AE%E9%A2%98/"},{"title":"解决JSON中不允许添加注释的问题","text":"vs code中如何解决JSON中不允许注释？ Comments are not permitted？ 错误显示： 解决方法：点击底部工具栏的 JSON 弹出的窗口中输入 json with Comments ,找到检索项后点击 再输入注释就正常了","link":"/2022/07/26/%E8%A7%A3%E5%86%B3JSON%E4%B8%AD%E4%B8%8D%E5%85%81%E8%AE%B8%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"在前端项目中使用MySQL","text":"在项目中操作数据库的步骤 安装操作 MySQL 数据库的第三方模块（mysql） 通过 mysql 模块连接到 MySQL 数据库 通过 mysql 模块执行 SQL 语句 安装与配置 mysql 模块安装 mysql 模块mysql 模块是托管于 npm 上的第三方模块。它提供了在 Node.js 项目中连接和操作 MySQL 数据库的能力。 想要在项目中使用它，需要先运行如下命令，将 mysql 安装为项目的依赖包： 1npm i mysql 配置 mysql 模块在使用 mysql 模块操作 MySQL 数据库之前，必须先对 mysql 模块进行必要的配置，主要的配置步骤如下： 123456789// 1. 导入 mysql 模块const mysql = require('mysql')// 2. 建立与 MySQL 数据库的连接关系const db = mysql.createPool({ host: '127.0.0.1', // 数据库的 IP 地址 user: 'root', // 登录数据库的账号 password: 'root', // 登录数据库的密码 database: 'mydb', // 指定要操作哪个数据库}) 测试 mysql 模块能否正常工作调用 db.query() 函数，指定要执行的 SQL 语句，通过回调函数拿到执行的结果： 1234567// 测试 mysql 模块能否正常工作db.query('select 1', (err, results) =&gt; { // mysql 模块工作期间报错了 if(err) return console.log(err.message) // 能够成功的执行 SQL 语句 console.log(results)}) 使用 mysql 模块操作 MySQL 数据库查询数据查询 users 表中所有的数据： 123456789// 查询 users 表中所有的数据const sqlStr = 'select * from users'db.query(sqlStr, (err, results) =&gt; { // 查询数据失败 if (err) return console.log(err.message) // 查询数据成功 // 注意：如果执行的是 select 查询语句，则执行的结果是数组 console.log(results)}) 插入数据向 users 表中新增数据， 其中 username 为 Spider-Man，password 为 pcc321： 123456789101112131415// 向 users 表中，新增一条数据，其中 username 的值为 Spider-Man，password 的值为 pcc123const user = { username: 'Spider-Man', password: 'pcc123' }// 定义待执行的 SQL 语句const sqlStr = 'insert into users (username, password) values (?, ?)'// 执行 SQL 语句db.query(sqlStr, [user.username, user.password], (err, results) =&gt; { // 执行 SQL 语句失败了 if (err) return console.log(err.message) // 成功了 // 注意：如果执行的是 insert into 插入语句，则 results 是一个对象 // 可以通过 affectedRows 属性，来判断是否插入数据成功 if (results.affectedRows === 1) { console.log('插入数据成功!') }}) 插入数据的便捷方式向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据： 1234567891011// 插入数据的便捷方式const user = { username: 'Spider-Man2', password: 'pcc4321' }// 定义待执行的 SQL 语句const sqlStr = 'insert into users set ?'// 执行 SQL 语句db.query(sqlStr, user, (err, results) =&gt; { if (err) return console.log(err.message) if (results.affectedRows === 1) { console.log('插入数据成功') }}) 更新数据可以通过如下方式，更新表中的数据： 123456789101112// 更新用户的信息const user = { id: 6, username: 'aaa', password: '000' }// 定义 SQL 语句const sqlStr = 'update users set username=?, password=? where id=?'// 执行 SQL 语句db.query(sqlStr, [user.username, user.password, user.id], (err, results) =&gt; { if (err) return console.log(err.message) // 注意：执行了 update 语句之后，执行的结果，也是一个对象，可以通过 affectedRows 判断是否更新成功 if (results.affectedRows === 1) { console.log('更新成功') }}) 更新数据的便捷方式更新表数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速更新表数据： 1234567891011// 更新数据的便捷方式const user = { id: 6, username: 'aaaa', password: '0000' }// 定义 SQL 语句const sqlStr = 'update users set ? where id=?'// 执行 SQL 语句db.query(sqlStr, [user, user.id], (err, results) =&gt; { if (err) return console.log(err.message) if (results.affectedRows === 1) { console.log('更新数据成功') }}) 删除数据在删除数据时，推荐根据 id 这样的唯一标识，来删除对应的数据。示例如下： 123456789// 删除 id 为 5 的用户const sqlStr = 'delete from users where id=?'db.query(sqlStr, 5, (err, results) =&gt; { if (err) return console.log(err.message) // 注意：执行 delete 语句之后，结果也是一个对象，也会包含 affectedRows 属性 if (results.affectedRows === 1) { console.log('删除数据成功') }}) 标记删除使用 DELETE 语句，会把真正的把数据从表中删除掉。为了保险起见，推荐使用标记删除的形式，来模拟删除的动作。 所谓的标记删除，就是在表中设置类似于 status 这样的状态字段，来标记当前这条数据是否被删除。 当用户执行了删除的动作时，我们并没有执行 DELETE 语句把数据删除掉，而是执行了 UPDATE 语句，将这条数据对应的 status 字段标记为删除即可。 12345678// 标记删除const sqlStr = 'update users set status=? where id=?'db.query(sqlStr, [0, 6], (err, results) =&gt; { if (err) return console.log(err.message) if (results.affectedRows === 1) { console.log('标记删除成功') }})","link":"/2022/07/20/%E5%9C%A8%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8MySQL/"},{"title":"npm与包的使用","text":"包什么是包Node.js 中的第三方模块又叫做包。 包的来源不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。 为什么需要包由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低。 包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率。 包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系。 从哪里下载包国外有一家 IT 公司，叫做 npm, Inc. 这家公司旗下有一个非常著名的网站： https://www.npmjs.com/ ，它是全球最大的包共享平台，可以从这个网站上搜索到任何你需要的包。 npm, Inc. 公司提供了一个地址为 https://registry.npmjs.org/ 的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。 如何下载包npm, Inc. 公司提供了一个包管理工具，Node Package Manager（简称 npm 包管理工具），这个包管理工具随着 Node.js 的安装包一起被安装到了用户的电脑上。 格式化时间传统案例15.dateFormat.js文件 1234567891011121314151617181920212223// 1. 定义格式化时间的方法function dateFormat(dtStr) { const dt = new Date(dtStr) const y = dt.getFullYear() const m = padZero(dt.getMonth() + 1) const d = padZero(dt.getDate()) const hh = padZero(dt.getHours()) const mm = padZero(dt.getMinutes()) const ss = padZero(dt.getSeconds()) return `${y}-${m}-${d} ${hh}:${mm}:${ss}` } // 定义补零的函数 function padZero(n) { return n &gt; 9 ? n : '0' + n } module.exports = { dateFormat } 调用： 12345678// 导入自定义的格式化时间的模块const TIME = require('./15.dateFormat')// 调用方法，进行时间的格式化const dt = new Date()// console.log(dt)const newDT = TIME.dateFormat(dt)console.log(newDT) npm格式化时间在项目中安装包 123npm install moment或npm i moment 调用： 123456// 1. 导入需要的包// 注意：导入的名称，就是装包时候的名称const moment = require('moment')const dt = moment().format('YYYY-MM-DD HH:mm:ss')console.log(dt) 安装指定版本的包默认情况下，使用 npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本例如： 1npm i moment@2.22.2 初次装包后多了哪些文件初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件。 其中： node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包。 package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。 注意：不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们。 包的语义化版本规范包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如 2.24.0其中每一位数字所代表的的含义如下： 第1位数字：大版本 第2位数字：功能版本 第3位数字：Bug修复版本 版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零。 包管理配置文件npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。例如： 项目的名称、版本号、描述等 项目中都用到了哪些包 哪些包只在开发期间会用到 那些包在开发和部署时都需要用到 多人协作的问题第三方包的体积过大，不方便团队成员之间共享项目源代码。 解决方案：共享时剔除node_modules 如何记录项目中安装了哪些包在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码。 注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 忽略文件中。 快速创建 package.jsonnpm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理配置文件： 1npm init -y 注意： 上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。 运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。 dependencies 节点package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包。例如： 123&quot;dependencies&quot;: { &quot;moment&quot;: &quot;^2.29.4&quot;} 一次性安装所有的包当我们拿到一个剔除了 node_modules 的项目之后，需要先把所有的包下载到项目中，才能将项目运行起来。否则会报类似于下面的错误： 12# 由于项目运行依赖于moment这个包，如果没有提前安装好这个包，就会报如下的错误:Error: Cannot find module 'moment' 可以运行 npm install 命令（或 npm i）一次性安装所有的依赖包： 123# 执行npm install 命令时，npm包管理工具会先读取 package.json 中的 dependencies节点，# 读取到记录的所有依赖包名称和版本号之后，npm包管理工具会把这些包一次性下载到项目中npm install 卸载包可以运行 npm uninstall 命令，来卸载指定的包： 12# 使用npm uninstall具体的包名来卸载包npm uninstall moment 注意：npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。 devDependencies 节点如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。 可以使用如下的命令，将包记录到 devDependencies 节点中： 1234# 安装指定的包，并记录到devDependencies节点中npm i 包名 -D# 注意:上述命令是简写形式，等价于下面完整的写法:npm install 包名 --save-dev 解决下包速度慢的问题为什么下包速度慢在使用 npm 下包的时候，默认从国外的 https://registry.npmjs.org/ 服务器进行下载，此时，网络数据的传输需要经过漫长的海底光缆，因此下包速度会很慢。 淘宝 NPM 镜像服务器淘宝在国内搭建了一个服务器，专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。 扩展：镜像（Mirroring）是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。 切换 npm 的下包镜像源下包的镜像源，指的就是下包的服务器地址。 123456# 查看当前的下包镜像源npm config get registry# 将下包的镜像源切换为淘宝镜像源npm config set registry=https://registry.npm.taobao.org/# 检查镜像源是否下载成功npm config get registry nrm为了更方便的切换下包的镜像源，我们可以安装 nrm 这个工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源。 123456# 通过npm包管理器，将nrm安装为全局可用的工具npm i nrm -g# 查看所有可用的镜像源nrm ls# 将下包的镜像源切换为taobao镜像nrm use taobao 包的分类使用 npm 包管理工具下载的包，共分为两大类，分别是： 项目包 全局包 项目包那些被安装到项目的 node_modules 目录中的包，都是项目包。 项目包又分为两类，分别是： 开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到） 核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到） 1234# 开发依赖包(会被记录到devDependencies节点下)npm i 包名 -D# 核心依赖包(会被记录到dependencies节点下)npm i 包名 全局包在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包。 全局包会被安装到 C:\\Users\\用户目录\\AppData\\Roaming\\npm\\node_modules 目录下。 1234# 全局安装指定的包npm i 包名 -g# 卸载全局安装的包npm uninstall 包名 -g 注意： 只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。 判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可。 i5ting_toci5ting_toc 是一个可以把 md 文档转为 html 页面的小工具，使用步骤如下： 1234# 将i5ting_toc安装为全局包npm install -g i5ting _toc#调用i5ting _toc，实现 md 转 html 的功能i5ting_toc -f 要转换的md文件路径 -o 规范的包结构一个规范的包，它的组成结构，必须符合以下 3 点要求： 包必须以单独的目录而存在 包的顶级目录下要必须包含 package.json 这个包管理配置文件 package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口。 注意：以上 3 点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址：https://yarnpkg.com/configuration/manifest 开发属于自己的包例如npm-test-tools包： 需要实现的功能 格式化日期 转义 HTML 中的特殊字符 还原 HTML 中的特殊字符 初始化包的基本结构新建 npm-test-tools 文件夹，作为包的根目录在 npm-test-tools 文件夹中，新建如下三个文件以及一个文件夹： package.json （包管理配置文件） index.js （包的入口文件） README.md （包的说明文档） src 文件夹 （模块化功能） 初始化 package.json12345678{ &quot;name&quot; : &quot;npm-test-tools&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;main&quot; : &quot;index.js&quot;, &quot;description&quot;:&quot;提供了格式化时间，HTMLEscape的功能&quot;, &quot;keywords&quot;: [&quot;npm&quot;, &quot;dateFormat&quot;, &quot;escape&quot;], &quot;license&quot; : &quot;ISC&quot;} 在该目录下的src目录下的dateFormat.js 中定义格式化时间的方法12345678910111213141516171819// 定义格式化时间的方法function dateFormat(dtStr) { const dt = new Date(dtStr) const y = dt.getFullYear() const m = padZero(dt.getMonth() + 1) const d = padZero(dt.getDate()) const hh = padZero(dt.getHours()) const mm = padZero(dt.getMinutes()) const ss = padZero(dt.getSeconds()) return `${y}-${m}-${d} ${hh}:${mm}:${ss}` } // 定义补零的函数 function padZero(n) { return n &gt; 9 ? n : '0' + n } 在该目录下的src目录下的dateFormat.js 中声明module.exports1234// 向外暴露需要的成员 module.exports = { dateFormat } 在该目录下的src目录下的htmlEscape.js 中定义定义转义 HTML 字符的方法123456789101112131415// 定义转义 HTML 字符的函数function htmlEscape(htmlstr) { return htmlstr.replace(/&lt;|&gt;|&quot;|&amp;/g, match =&gt; { switch (match) { case '&lt;': return '&amp;lt;' case '&gt;': return '&amp;gt;' case '&quot;': return '&amp;quot;' case '&amp;': return '&amp;amp;' } })} 在该目录下的src目录下的htmlEscape.js 中定义还原 HTML 的方法123456789101112131415// 定义还原 HTML 字符串的函数function htmlUnEscape(str) { return str.replace(/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g, match =&gt; { switch (match) { case '&amp;lt;': return '&lt;' case '&amp;gt;': return '&gt;' case '&amp;quot;': return '&quot;' case '&amp;amp;': return '&amp;' } })} 在该目录下的src目录下的htmlEscape.js 中声明module.exports12345// 向外暴露需要的成员module.exports = { htmlEscape, htmlUnEscape} 在 index.js 中，导入两个模块，得到需要向外共享的方法1234// 这是包的入口文件const date = require('./src/dateFormat')const escape = require('./src/htmlEscape')} 在 index.js 中，使用 module.exports 把对应的方法共享出去12345// 向外暴露需要的成员module.exports = { ...date, ...escape} 编写包的说明文档包根目录中的 README.md 文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以 markdown 的格式写出来，方便用户参考。 README.md 文件中具体写什么内容，没有强制性的要求；只要能够清晰地把包的作用、用法、注意事项等描述清楚即可。 这个包的 README.md 文档中，包含以下 6 项内容： 安装方式、导入方式、格式化时间、转义 HTML 中的特殊字符、还原 HTML 中的特殊字符、开源协议。 测试1234567891011121314const test = require('./npm-test-tools')// 格式化时间的功能const dtStr = test.dateFormat(new Date())console.log(dtStr)console.log('-----------')const htmlStr = '&lt;h1 title=&quot;abc&quot;&gt;这是h1标签&lt;span&gt;123&amp;nbsp;&lt;/span&gt;&lt;/h1&gt;'const str = test.htmlEscape(htmlStr)console.log(str)console.log('-----------')const str2 = test.htmlUnEscape(str)console.log(str2) 结果： 123452022-07-10 18:32:17-----------&amp;lt;h1 title=&amp;quot;abc&amp;quot;&amp;gt;这是h1标签&amp;lt;span&amp;gt;123&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;-----------&lt;h1 title=&quot;abc&quot;&gt;这是h1标签&lt;span&gt;123&amp;nbsp;&lt;/span&gt;&lt;/h1&gt; 发布包注册 npm 账号 访问 https://www.npmjs.com/ 网站，点击 sign up 按钮，进入注册用户界面 填写账号相关的信息：Username、Email address、Password 勾选同意许可 点击 Create an Account 按钮，注册账号 邮箱一次性密码验证 终端登录 npm 账号npm 账号注册完成后，可以在终端中执行 npm login 命令，依次输入用户名、密码、邮箱（一次性密码验证邮箱）后，即可登录成功。 注意：在运行 npm login 命令之前，必须先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败！ 把包发布到 npm 上将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能和 npm 官网上的重复）。 会有邮件提示包发布成功。 在https://www.npmjs.com/ 登录后，可在头像菜单选项下的Packages下查看自己发布的包。 删除已发布的包运行 npm unpublish 包名 --force 命令，即可从 npm 删除已发布的包。注意： npm unpublish 命令只能删除 72 小时以内发布的包 npm unpublish 删除的包，在 24 小时内不允许重复发布 发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包！","link":"/2022/07/10/npm%E4%B8%8E%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"hexo配置主题","text":"正如该博客封面图所示，主题配置成自己想要的效果不太容易，好多不懂，网上查有的也查不到结果。 所以搞多少算多少，之后再慢慢补吧。 安装主题在官网选择自己想要的主题：https://hexo.io/themes/ Git来克隆主题的代码仓库到themes目录下1git clone https://github.com/ppoffice/hexo-theme-主题名.git themes/主题名 切换主题_config.yml文件中的修改theme属性1theme: 主题名 主题适配一些前言需要配置站点下_config.主题名.yml的内容。 一般站点下和主题目录下都会有_config.yml文件。 但是由于主题编写语言不同，导致有的主题文件下的默认配置文件_config.yml不存在。有该文件可用其对不同页面进行配置。 _config.主题名.yml配置版本1version: 5.0.0 主题皮肤1variant: default logo123# logo: /img/logo.svg #logo,可用图片或文字logo: text: SummlBlog 菜单导航栏图标12head: : /ifaviconmg/favicon.svg 导航栏1234567891011navbar: menu: 主页: / 归档: /archives 分类: /categories 标签: /tags 关于: /about links: GitHub: icon: fab fa-github url: https://github.com/Summl 页脚123456789101112footer: links: # Creative Commons: # icon: fab fa-creative-commons # url: https://creativecommons.org/ # Attribution 4.0 International: # icon: fab fa-creative-commons-by # url: https://creativecommons.org/licenses/by/4.0/ # Download on GitHub: My GitHub: icon: fab fa-github url: https://github.com/Summl 文章theme：可对代高亮显示设置 clipboard：代码复制按钮 fold：折叠或展开所有代码块 readtime：阅读整篇文章大概所需时间时间 update_time：文章更新时间 123456789101112131415161718article: highlight: # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light clipboard: true fold: unfolded readtime: true update_time: true licenses: Creative Commons: icon: fab fa-creative-commons url: https://creativecommons.org/ Attribution: icon: fab fa-creative-commons-by url: https://creativecommons.org/licenses/by/4.0/ Noncommercial: icon: fab fa-creative-commons-nc url: https://creativecommons.org/licenses/by-nc/4.0/ 搜索框12search: type: insight 评论、打赏、分享需要专门设置 12345678910111213141516171819202122232425262728# comment:# type: disqus# shortname: '' # donates:# -# type: afdian# url: ''# -# type: alipay# qrcode: ''# -# type: buymeacoffee# url: ''# -# type: patreon# url: ''# -# type: paypal# business: ''# currency_code: USD# -# type: wechat# qrcode: ''# share:# type: sharethis# install_url: '' 侧栏固定12345sidebar: left: sticky: false right: sticky: false 侧栏配置position设置right会变三栏 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374widgets: - position: left type: profile author: Summl author_title: '一枚无名小辈' location: '中国' avatar: avatar_rounded: false gravatar: follow_link: https://Summl.github.io/ social_links: Github: icon: fab fa-github url: https://Summl.github.io/ Facebook: icon: fab fa-facebook url: https://facebook.com Twitter: icon: fab fa-twitter url: https://twitter.com Dribbble: icon: fab fa-dribbble url: https://dribbble.com RSS: icon: fas fa-rss url: / - position: left type: toc index: true collapsed: true depth: 3 - position: left type: links links: # Hexo: https://hexo.io # Bulma: https://bulma.io gitee: https://gitee.com/ma-jia-le Email: 1870949565@qq.com 稀土掘金: https://juejin.cn/user/4002677701488424 简书: https://www.jianshu.com/u/8121c6bc7a9a - position: left type: recent_posts - position: left type: categories - position: left type: archives - position: left type: tags - position: left # type: subscribe_email type: # description: # feedburner_id: '' - position: left # type: adsense type: client_id: '' slot_id: '' - position: left # type: followit type: # description: # action_url: '' # verification_code: '' 网站访问量与访客量统计修改主题配置文件，_config.文件名.yml文件 1busuanzi: true source\\_posts博客设置博客头部设置12345678910title: Hexo+GitHub自建博客 #博客标题 date: 2022-07-06 14:07:14 #创建博客时间cover: /gallery/Hexo+GitHub自建博客/图1.jpg #博客封面thumbnail: /gallery/Hexo+GitHub自建博客/图1.jpg #博客缩略图tags: #标签 可以多个 - GitHub - Hexocategories: #分类 可多级目录 - 关于博客（一级分类目录） - 二级分类目录 图片需要在source目录下新建gallery目录 主页博客添加阅读全文按钮在文章中截断地方添加 1&lt;!--more--&gt; 新建文章头部模板在scaffolds目录下的post.md文件里设置 例如： 12345678title: {{ title }}date: {{ date }}cover: /gallery/{{ title }}/图1.jpgthumbnail: /gallery/{{ title }}/图1.jpgtags: - categories: - 文章置顶安装如下插件 12npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save 需要置顶的文章头部再增加如下属性配置 1top: true 注：可以设置true，也可以设置置顶的编号顺序，例如top: 1 文章目录显示站点下的_config.yml文件里添加 1toc: true 在主题的_config.post.yml文件下可进行设置 12345position: left type: toc index: true collapsed: true depth: 3 目录粘性定位原来只支持侧边栏整体粘性定位，为了阅读体验，只针对目录开启粘性定位，增加 column-left is-sticky 类，并调整样式。 source/js/main.js文件123 if ($toc.length &gt; 0) {+ $toc.addClass('column-left is-sticky'); const $mask = $('&lt;div&gt;'); include/style/widget.styl文件123+#toc+ max-height: calc(100vh - 22px)+ overflow-y: scroll 博客内容插入图片修改博客根目录中_config.yml文件的配置项post_asset_folder为true 完成此设置后，当你通过hexo new 文件名新建博客后，会产生一个和文件同名的文件夹。 在博客根目录中下使用npm安装插件： 1npm install https://github.com/CodeFalling/hexo-asset-image --save 当文章需要添加图片时，将需要添加的图片放入同名的文件夹中，同时通过相对路径索引到该图片。 1![示例](./解决Hexo博客不显示图片的一种方法/1.png) 页面设置新建标签 tags 页面如果在 source 目录下还没有 tags/index.md 文件，那么就需要新建一个 1hexo new page &quot;tags&quot; 编辑刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容： 1234title: tagesdate: 2022-07-07 18:55:10type: tagslayout: tags 分类 categories 页面、关于我 about 页面同上about关于页面信息展示在source 目录下还没有 about.md 文件填写内容 博客布局分栏设置通过配置的方式把所有文章变为两栏布局，其他页面设置为三栏布局 在站点下的_config.yml文件把需要的widget分别显示在left和right 在_config.post.yml文件把需要的widget显示在left 但两栏整体宽度跟三栏不同，因此强制指定为三栏布局，并且修改相应的宽度，这样所有的页面侧边栏宽度保持一致。 layout/layout.jsx文件1234 &lt;Head site={site} config={config} helper={helper} page={page} /&gt;- &lt;body class={`is-${columnCount}-column`}&gt;+ &lt;body class={`is-3-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; layout/layout.jsx文件1234 'is-12': columnCount === 1,- 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2,+ 'is-8-tablet is-8-desktop is-9-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 layout/common/widgets.jsx文件12345678 function getColumnSizeClass(columnCount) { switch (columnCount) { case 2:- return 'is-4-tablet is-4-desktop is-4-widescreen';+ return 'is-4-tablet is-4-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } 并优化在不同屏幕小大下的宽度 include/style/responsive.styl文件1234567891011121314151617+widescreen()+ .is-3-column .containe+ max-width: $widescreen - $gap+ width: $widescreen - $gap+ .is-1-column .container, .is-2-column .container max-width: $desktop - 2 * $gap width: $desktop - 2 * $gap+fullhd()+ .is-3-column .container+ max-width: $fullhd - 2 * $gap+ width: $fullhd - 2 * $gap+ .is-2-column .container max-width: $widescreen - 2 * $gap width: $widescreen - 2 * $gap","link":"/2022/07/08/hexo%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/"},{"title":"搞博客遇到的一些问题","text":"问题一：本地能显示博客，GitHub地址显示不出来博客在复制id_rsa.pub文件里的内容，粘贴到Github的SSH and GPG keys里时，直接粘贴，不要删除换行符之类。 问题二：FATAL Port 4000 has been used. Try other port instead.在启动服务加上端口号： 1hexo server -p 4001 问题三：git clone unable to access ‘XXX‘: OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054方式一：解除ssl验证后，再次git：命令行运行 1git config --global http.sslVerify &quot;false&quot; 方式二：加大缓存大小 1git config --global http.postBuffer 524288000 问题四：GitHub建仓库时忘记建READ.ME文件在根目录的source 文件夹下新建README.md文件 然而当我们执行 hexo g -d 部署博客的时候会发现README.md变成了 README.html。GitHub上也只有README.html文件。 原因是当我们在执行 hexo g -d 命令时，.md 文件会被转化成.html 文件，并将这些文件放到 public 目录里，最后再提交到远程 GitHub 仓库，而 Hexo 也提供了一个方法，让.md 文件不被转换成.html 文件，在根目录的 _config.yml 配置文件里，找到 skip_render 关键字，添加 README.md，让解释器跳过渲染就行了： 1skip_render: README.md 一些注意项注意一：在注释一些选项时要把上面的-一起注释，否则会报错 123# -# position: left# type: toc ：后面有一个空格 注意二：有的主题目录里没有_config.post.yml文件，导致一些功能不能设置。 可手动在_config.主题名.yml 同级目录下自行创建。","link":"/2022/07/08/%E6%90%9E%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"},{"title":"Hexo+GitHub自建博客","text":"下载安装软件Git、Node.js、Hexo 下载安装Hexo命令1npm install -g hexo-cli Hexo命令,生成本地博客初始化Hexo，根目录下1hexo init 安装博客所需要的依赖文件1npm install 生成静态页面至public目录123hexo generate或hexo g 开启预览访问端口（默认端口4000，ctrl + c 关闭 server ，地址：http://localhost:4000/ ）123hexo server或 hexo s 如果4000端口被占用，可更换端口1hexo s -p 4001 部署到GitHub123hexo deploy或 hexo d 清除缓存文件 (db.json) 和已生成的静态文件 (public)1hexo clean 新建文章123hexo new &quot;postName&quot;或 hexo n &quot;postName&quot; 组合命令生成并本地预览1hexo s -g 生成并上传1hexo d -g 本地博客发布到GitHub命令在博客目录下，安装发布的插件1npm install hexo-deployer-git --save 将本地目录与GitHub关联起来 1ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 一直回车，直到能输入命令。然后在C:/Users/[username]目录下找到名为.ssh的文件夹， 文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本编辑器打开id_rsa.pub，复制里面的的内容。 打开Github，点击右上角的头像 Settings 选择SSH and GPG keys。点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的Title可以随意，点击Add SSH key 完成添加。（注意不要删除粘贴的换行符） 回到Git的命令行界面，测试一下是否与GitHub连接成功1ssh -T git@github.com 点击回车，然后会出现一个询问内容，输入yes，回车，会出现一段内容，Hi &lt;account name&gt;! You've successfully authenticated, but GitHub doesnot provide shell access.。 说明连接成功。此处这个&lt;account name&gt;应该是你Github的用户名。 修改Hexo配置文件进入博客站点目录，用文本编辑器打开_config.yml1234567title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种 timezone: 时区 1url: 修改为https://&lt;用户名&gt;.github.io 滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。 1234type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;Github用户名&gt;.github.io.git #也可使用https地址，如：https://github.com/&lt;Github用户名&gt;/&lt;Github用户名&gt;.github.io.git branch: master 生成页面 123hexo cleanhexo g -dhexo s 在浏览器中打开https://&lt;用户名&gt;.github.io，查看上传的网页。","link":"/2022/07/06/Hexo+GitHub%E8%87%AA%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"自建包","slug":"自建包","link":"/tags/%E8%87%AA%E5%BB%BA%E5%8C%85/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JSON","slug":"JSON","link":"/tags/JSON/"}],"categories":[{"name":"关于博客","slug":"关于博客","link":"/categories/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"},{"name":"Node.js","slug":"Node-js","link":"/categories/Node-js/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"JSON","slug":"JSON","link":"/categories/JSON/"}]}